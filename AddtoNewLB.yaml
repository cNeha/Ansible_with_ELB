- name: create ELB and add an instance to ELB
  hosts: localhost
  connection: local
  gather_facts: False
  roles:
    - syncrou.manageiq-automate
  tasks:
  - name: "Get Attributes"
    manageiq_automate:
      workspace: "{{ workspace }}"
      get_attribute:
        object: "root"
        attribute: "elb_name"
    register: elb_name
  - debug:
      var: elb_name
  - name: "Get ELB PORT"
    manageiq_automate:
      workspace: "{{ workspace }}"
      get_attribute:
        object: "root"
        attribute: "elb_port"
    register: elb_port 
  - debug:
      var: elb_port
  - name: "GET Instance ID"
    manageiq_automate:
      workspace: "{{ workspace }}"
      get_attribute:
        object: "root"
        attribute: "instance_id"
    register: instance_id
  - debug:
      var: instance_id
  - name: "GET Region"
    manageiq_automate:
      workspace: "{{ workspace }}"
      get_attribute:
        object: "root"
        attribute: "region"
    register: region
  - debug: 
      var: region
  - name: "Get Subnet ID"
    manageiq_automate:
      workspace: "{{ workspace }}"
      get_attribute:
        object: "root"
        attribute: "subnet_id"
    register: subnet_id
  - debug:
      var: subnet_id
  - name: "Get AZ"
    manageiq_automate:
      workspace: "{{ workspace }}"
      get_attribute:
        object: "root"
        attribute: "availability_zone"
    register: availability_zone
  - debug: 
      var: availability_zone
  - name: Get the list of root object attribute names (get_object_attribute_names)
    manageiq_automate:
      workspace: "{{ workspace }}"
      get_object_attribute_names:
        object: "root"
    register: root_object_attribute_names
  - debug: msg="Result:{{ root_object_attribute_names.value }}"
    
  - name: setup a simple load balancer
    ec2_elb_lb:
      name: "{{ elb_name['value'] }}"
      state: present
      region: "{{ region['value'] }}"
      subnets:
        - "{{ subnet_id['value'] }}"
      health_check:
          ping_protocol: http
          ping_port: 80
          ping_path: "/index.html"
          response_timeout: 5 
          interval: 30 
          unhealthy_threshold: 10
          healthy_threshold: 2
      listeners:
        - protocol: http
          load_balancer_port: "{{ elb_port['value'] }}"
          instance_port: "{{ elb_port['value'] }}"
    register: aws_elb
  - debug: 
      var: aws_elb
  - set_fact:
      lb_name={{ aws_elb.elb.name }}
      cacheable=yes
  - debug: 
      var: lb_name
  - name: Add vm to load balancer
    local_action: ec2_elb
    args:
      instance_id: "{{ instance_id['value'] }}"
      ec2_elbs: "{{ elb_name['value'] }}"
      state: present
      region: "{{ region['value'] }}"
    register: lb_added
    ignore_errors: yes
  - debug: 
      var: lb_added
